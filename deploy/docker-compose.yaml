version: "3.0"

volumes:
  policy-enforcement-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./policy-enforcement-service
  e2e-test-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./e2e

services:
  policy-enforcement-service:
    build:
      context: ../services/policy-service
      dockerfile: ./DockerFile
    ports:
      - "4999:4999"
    volumes:
      - policy-enforcement-data:/mnt/
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POLICIES_CONFIG_PATH: ${POLICIES_CONFIG_PATH}
    networks:
      - custom
  userDB:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    networks:
      - custom
  user-service:
    build:
      context: ../services/user-service
      dockerfile: ./DockerFile
    environment:
      SECRET: ${JWT_SECRET}
      POSTGRES_DSN: ${POSTGRES_DSN_ASYNC_USER}
      LOKI_URL: ${LOKI_URL}
    ports:
      - "5000:5000"
    depends_on:
      - userDB
    networks:
      - custom
  spotDB:
    image: postgis/postgis:13-master
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5433:5432"
    networks:
      - custom
  spot-service:
    build:
      context: ../services/spot-service
      dockerfile: ./DockerFile
    environment:
      - POSTGRES_DSN=postgresql://postgres:postgres@spotDB:5432/postgres
      - LOKI_URL=http://loki:3100/loki/api/v1/push
    ports:
      - "5001:5001"
    depends_on:
      - spotDB
    networks:
      - custom
  matchDB:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5434:5432"
    networks:
      - custom
  match-service:
    build:
      context: ../services/match-service
      dockerfile: ./DockerFile
    environment:
      - POSTGRES_DSN=postgresql://postgres:postgres@matchDB:5432/postgres
      - LOKI_URL=http://loki:3100/loki/api/v1/push
    ports:
      - "5002:5002" 
    depends_on:
      - matchDB
    networks:
      - custom
  teamDB:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5435:5432"
    networks:
      - custom
  team-service:
    build:
      context: ../services/team-service
      dockerfile: ./DockerFile
    environment:
      - POSTGRES_DSN=postgresql://postgres:postgres@teamDB:5432/postgres
    ports:
      - "5003:5003"
    networks:
      - custom
    depends_on:
      - teamDB
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus_data/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - custom
  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    networks:
      - custom
  loki:
    image: grafana/loki:2.9.2
    ports:
      - 3100:3100
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml -config.expand-env=true
    networks:
      - custom
  promtail:
    image: grafana/promtail:2.9.2
    restart: always
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    networks:
      - custom
  test-runner:
    image: python:3.11
    volumes:
      - e2e-test-data:/mnt/
    command: >
      bash -c "pip install requests pydantic sqlalchemy psycopg2-binary
      && python -m unittest /mnt/test.py"
    depends_on:
      - policy-enforcement-service
    networks:
      - custom
networks:
  custom:
    driver: bridge